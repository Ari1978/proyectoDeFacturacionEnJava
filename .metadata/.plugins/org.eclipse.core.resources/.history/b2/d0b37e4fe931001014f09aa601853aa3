package com.coderhouse.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import org.springframework.web.ErrorResponse;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.coderhouse.dto.AsignacionCategoriaPracticaDTO;
import com.coderhouse.models.Practica;

import com.coderhouse.service.PracticaService;


import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;



@RestController
@RequestMapping("/a/practicas")


public class PracticaController {
	
	@Autowired
	private PracticaService practicaService;
	
	
	@Operation(summary = "Obtener las lista de las prácticas")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Lista de Prácticas obtenida correctamente", content = {
				@Content(mediaType = "application/json", schema = @Schema(implementation = Practica.class))
			}),
			@ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content)
	})

	
	@GetMapping(path ={"/", ""})
	public ResponseEntity<List<Practica>> getAllPracticas() {
		try {
			  List<Practica> practicas = practicaService.findAll(); 
				  return ResponseEntity.ok(practicas); // 200
			  } catch (Exception err) {
				  return ResponseEntity.internalServerError().build(); //500
			  }
				  
	}
	
	
	@Operation(summary = "Obtener una práctica por su ID")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Práctica obtenida correctamente", content = {
				@Content(mediaType = "application/json", schema = @Schema(implementation = Practica.class))
			}),
			@ApiResponse(responseCode = "404", description = "Error al intentar obtener la práctica", content = 
			@Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
			@ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content)
	})
	

	
	@GetMapping("/{practicaId}")
	public ResponseEntity<?> getPacienteById(@PathVariable Long practicaId){
		
		try {
			  
			Practica practica = practicaService.findById(practicaId);
			return ResponseEntity.ok(practica); // 200
		} catch(IllegalArgumentException e) {
			return ResponseEntity.notFound().build(); //404
		}catch(Exception err) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); //500
		}
	}
	
	
	@Operation(summary = "Registrar una nueva práctica a un paciente, usando DTO")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "201", description = "Práctica registrada correctamente", content = {
				@Content(mediaType = "application/json", schema = @Schema(implementation = Practica.class))
			}),
			@ApiResponse(responseCode = "400", description = "Error al intentar registrar una práctica", content = 
			@Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
			@ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content)
	})

	
	@PostMapping("/asignar-categoria")
	public ResponseEntity<?> asignarCategoriaPractica(@RequestBody AsignacionCategoriaPracticaDTO dto) {
		
		if(dto.getCategoriaId() == null) {
			return ResponseEntity.badRequest().body("El ID de la Categoria no puede ser null");
		}
		
		if(dto.getPracticaId() == null) {
			return ResponseEntity.badRequest().body("El ID de la Practica no puede ser null");
		}
		try {
			Practica practicaActualizada = practicaService.AsignacionCategoriaPracticaDTO(
					dto.getPracticaId(),
					dto.getCategoriaId()
					);
			return ResponseEntity.ok(practicaActualizada); //201
		}catch (IllegalStateException err) {
			return ResponseEntity.status(HttpStatus.CONFLICT).body(err.getMessage()); //409
		}catch (IllegalArgumentException err) {
			return ResponseEntity.notFound().build(); //404
			
		}catch (Exception err) {
			return ResponseEntity.internalServerError().build(); //500
			
		}
	}
	
	
	@Operation(summary = "Editar una práctica por su ID")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "200", description = "Práctica editada correctamente", content = {
				@Content(mediaType = "application/json", schema = @Schema(implementation = Practica.class))
			}),
			@ApiResponse(responseCode = "404", description = "Error al intentar editar una práctica", content = 
			@Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
			@ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content
			(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)))
	})
	

	@PutMapping("/{practicaId}")
	public ResponseEntity<?> updatePracticaById(@PathVariable Long practicaId,@RequestBody Practica practicaActualizada){
		
		
		if(practicaId == null) {
			return ResponseEntity.badRequest().body("El ID de la Practica no puede ser null");
		}
		try {
			Practica practica = practicaService.update(practicaId, practicaActualizada);
			return ResponseEntity.ok(practica); // 200
			
		}catch (IllegalArgumentException err) {
			return ResponseEntity.notFound().build(); //404
	
	
		}catch (Exception err) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); //500
		
		}
	

	}
	
	
	
	@Operation(summary = "Eliminar un práctica")
	@ApiResponses(value = {
			@ApiResponse(responseCode = "204", description = "Práctica eliminada correctamente", content = {
				@Content() }),
			@ApiResponse(responseCode = "404", description = "Error al intentar eliminar la práctica", content = 
			@Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))),
			@ApiResponse(responseCode = "500", description = "Error interno del servidor", content = @Content
			(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class)))
	})


	@DeleteMapping("/{practicaId}")
	public ResponseEntity<?> deletePracticaById(@PathVariable Long practicaId) {
		
		if(practicaId == null) {
			return ResponseEntity.badRequest().body("El ID de la Practica no puede ser null");
		}
		try {
			practicaService.deleteById(practicaId); 
			return ResponseEntity.noContent().build(); // 204
		
		}catch (IllegalArgumentException err) {
			return ResponseEntity.notFound().build(); //404


		}catch (Exception err) {
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); //500
	
		}
	}

}

























